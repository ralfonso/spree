// Code generated by protoc-gen-go.
// source: spree.proto
// DO NOT EDIT!

/*
Package spree is a generated protocol buffer package.

It is generated from these files:
	spree.proto

It has these top-level messages:
	CreateRequest
	CreateResponse
	Shot
*/
package spree

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateRequest struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (m *CreateRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateResponse struct {
	Shot *Shot `protobuf:"bytes,1,opt,name=shot" json:"shot,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (m *CreateResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateResponse) GetShot() *Shot {
	if m != nil {
		return m.Shot
	}
	return nil
}

type Shot struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CreatedAt string `protobuf:"bytes,2,opt,name=created_at" json:"created_at,omitempty"`
	Filename  string `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	Views     uint64 `protobuf:"varint,4,opt,name=views" json:"views,omitempty"`
}

func (m *Shot) Reset()                    { *m = Shot{} }
func (m *Shot) String() string            { return proto.CompactTextString(m) }
func (*Shot) ProtoMessage()               {}
func (*Shot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*CreateRequest)(nil), "CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "CreateResponse")
	proto.RegisterType((*Shot)(nil), "Shot")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Spree service

type SpreeClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type spreeClient struct {
	cc *grpc.ClientConn
}

func NewSpreeClient(cc *grpc.ClientConn) SpreeClient {
	return &spreeClient{cc}
}

func (c *spreeClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := grpc.Invoke(ctx, "/Spree/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Spree service

type SpreeServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
}

func RegisterSpreeServer(s *grpc.Server, srv SpreeServer) {
	s.RegisterService(&_Spree_serviceDesc, srv)
}

func _Spree_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(SpreeServer).Create(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Spree_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Spree",
	HandlerType: (*SpreeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Spree_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 194 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2e, 0x28, 0x4a,
	0x4d, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xd2, 0xe6, 0xe2, 0x75, 0x2e, 0x4a, 0x4d, 0x2c,
	0x49, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x92, 0xe2, 0xe2, 0x48, 0xcb, 0xcc, 0x49,
	0xcd, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x82, 0xf3, 0x81, 0x8a, 0xf9,
	0x60, 0x8a, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb9, 0x58, 0x8a, 0x33, 0xf2, 0x4b,
	0xc0, 0x2a, 0xb9, 0x8d, 0x58, 0xf5, 0x82, 0x81, 0x9c, 0x20, 0xb0, 0x90, 0x52, 0x3a, 0x17, 0x0b,
	0x88, 0x27, 0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x02, 0x35, 0x0a, 0xc8, 0x12, 0x92, 0xe5, 0xe2, 0x4a,
	0x06, 0x1b, 0x92, 0x12, 0x9f, 0x58, 0x22, 0xc1, 0x04, 0x16, 0xe7, 0x84, 0x8a, 0x38, 0xa2, 0xda,
	0xcf, 0x8c, 0x6a, 0xbf, 0x90, 0x08, 0x17, 0x6b, 0x59, 0x66, 0x6a, 0x79, 0xb1, 0x04, 0x0b, 0x50,
	0x82, 0x25, 0x08, 0xc2, 0x31, 0x32, 0xe1, 0x62, 0x0d, 0x06, 0xf9, 0x48, 0x48, 0x9b, 0x8b, 0x0d,
	0xe2, 0x3c, 0x21, 0x3e, 0x3d, 0x14, 0x4f, 0x49, 0xf1, 0xeb, 0xa1, 0xba, 0x5b, 0x89, 0x21, 0x89,
	0x0d, 0xec, 0x7f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x0c, 0xe7, 0xbd, 0x0e, 0x01,
	0x00, 0x00,
}
